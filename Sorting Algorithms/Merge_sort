Algorithm :
✔Divide: Divide the unsorted list into two equal halves (or approximately equal if the number of elements is odd). 
This step is repeated recursively on each half until you have sublists with only one element. This forms the base case of the recursion.

✔Conquer: Sort each of the sublists obtained in the previous step. 
This can be done by recursively applying the merge sort algorithm on each sublist until you have sorted sublists of one element each.

✔Merge: Merge the sorted sublists obtained in the previous step to produce a single sorted list. 
This is done by comparing the elements in the two sublists and merging them in sorted order into a new list. Continue this process until all elements are merged into a single sorted list.

✔Repeat: Continue dividing, sorting, and merging until the entire list is sorted.


Psuedo Code :

void merge(int arr[], int l, int m, int r)
    {
        // Find sizes of two subarrays to be merged
        int n1 = m - l + 1;
        int n2 = r - m;
 
        // Create temp arrays
        int L[] = new int[n1];
        int R[] = new int[n2];
 
        // Copy data to temp arrays
        for (int i = 0; i < n1; ++i)
            L[i] = arr[l + i];
        for (int j = 0; j < n2; ++j)
            R[j] = arr[m + 1 + j];
 
        // Merge the temp arrays
 
        // Initial indices of first and second subarrays
        int i = 0, j = 0;
 
        // Initial index of merged subarray array
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            }
            else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
 
        // Copy remaining elements of L[] if any
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
 
        // Copy remaining elements of R[] if any
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
 
    // Main function that sorts arr[l..r] using
    // merge() l=0 r=n-1 n is length of the array
    void sort(int arr[], int l, int r)
    {
        if (l < r) {
 
            // Find the middle point
            int m = l + (r - l) / 2;
 
            // Sort first and second halves
            sort(arr, l, m);
            sort(arr, m + 1, r);
 
            // Merge the sorted halves
            merge(arr, l, m, r);
        }
    }
